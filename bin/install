#!/usr/bin/bash

# ---------------------------------
# Setup
# ---------------------------------

AGENT="$HOME/Library/LaunchAgents/${LABEL}.plist"
LABEL="com.user.jarvis"
MARKER="$HOME/tmp/jarvis.install"

# Obs, bail out
set -e

# Teehee!
repoop() {
  sudo reboot
}

# The truth is out here
has_requirements() {
  command -v nix &>/dev/null || [ -f "$MARKER" ]
}

# Printers
info() {
  echo -e "\r[ \033[00;34m!!\033[0m ] $1"
}

success() {
  echo -e "\r\033[2K[ \033[00;32mOK\033[0m ] $1"
}

warning() {
  echo -e "\r[ \033[00;33m..\033[0m ] $1"
}

# Ensure cleanup on error or exit
trap 'cleanup' EXIT

cleanup() {
  if [ -f "$MARKER" ]; then
    warning "Running cleanup..."
    rm -f "$MARKER"
    launchctl unload "$AGENT"
    rm -f "$AGENT"
    info "Cleanup completed!"
  fi
}

# ---------------------------------
# Let's begin
# ---------------------------------

# Supa-dupa-fly
sudo -v

# Go home, and start fresh
cd && clear

# Be polite!
if ! has_requirements; then
  echo "Hello $(whoami)! Let's get you set up."
else
  echo "Welcome back $(whoami)! Let's continue."
fi

printf "\n"

# ---------------------------------
# B.C.
# ---------------------------------

# File vault is meh and kills nix install so we must do some manual work :P

# If nix is not installed and no jarvis in tmp...
if ! has_requirements; then

  warning "Setting up requirements..."

  # Create nix stuff
  sudo mkdir -p /System/Volumes/Data/opt/nix
  sudo chown "$(whoami)" /System/Volumes/Data/opt/nix
  sudo sh -c "echo 'nix System/Volumes/Data/opt/nix' >> /etc/synthetic.conf"

  export NIX_IGNORE_SYMLINK_STORE=1

  cat << EOF > "$HOME/.zprofile"
if [ -f "$HOME/.nix-profile/etc/profile.d/nix.sh" ]; then
  . "$HOME/.nix-profile/etc/profile.d/nix.sh"
  export NIX_IGNORE_SYMLINK_STORE=1
fi
EOF

  # Set a marker that we were here...
  mkdir -p "$HOME/tmp"
  touch "$MARKER"

  # Create .plist file
  cat << EOF > "$AGENT"
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>Label</key>
    <string>$LABEL</string>
    <key>ProgramArguments</key>
    <array>
      <string>/bin/bash</string>
      <string>$0</string>
    </array>
    <key>RunAtLoad</key>
    <true/>
  </dict>
</plist>
EOF
  launchctl load "$AGENT"
  
  info "All done! Repoop."
  repoop
else
  warning "Resuming installation..."
fi

printf "\n"

# ---------------------------------
# Install Nix
# ---------------------------------

info "Nixify this bad boy!"
printf "\n"

if command -v nix &>/dev/null; then
  warning "Nix already installed. Checking for updates..."
  printf "\n"

  nix-channel --update

  printf "\n"
  success "Nix updated successfully!"
else
  warning "No Nix found!"
  printf "\n"

  warning "Install nix..."

  curl -L https://nixos.org/nix/install | sh
  printf "\n"
  success "Nix installed successfully!"
fi

printf "\n"

# ---------------------------------
# Get dotfiles
# ---------------------------------

#info "Bring in the big guns"
#printf "\n"

#JRV="$HOME/Development/personal/jarvis"
#mkdir -p "$JRV"

#nix-shell -p git --run \
#  "git clone https://github.com/ildx/jarvis.git \"$JRV\"; \
#  git -C \"$JRV\" remote set-url origin git@github.com:ildx/jarvis.git"

#printf "\n"

# ---------------------------------
# SSH
# ---------------------------------

#info "Handover keys to the kingdom"
#printf "\n"

#SSH="$HOME/.ssh"

#if ! [[ -f "$SSH/authorized_keys" ]]; then
#  mkdir -p "$SSH"
#  ssh-keygen -t ed25519 -C "iivari.leinonen@gmail.com" -f "$SSH/id.personal"
#  cat "$SSH/id.personal.pub" >> "$SSH/authorized_keys"
#  eval "$(ssh-agent -s)"
#  cat << EOF >> "$SSH/config"
## Github
#Host github.com
#  AddKeysToAgent yes
#  IdentityFile $SSH/id.personal
#  IgnoreUnknown UseKeychain
#EOF
#  ssh-add "$SSH/id.personal"
#  success "SSH keys generated successfully!"
#else
#  success "SSH keys already generated, skipping..."
#fi

#printf "\n"

# ---------------------------------
# Create file system 
# ---------------------------------

#info "Build a place to call home"
#printf "\n"

#DIR=(
#  "$HOME/Archives"
#  "$HOME/Pictures/Screenshots"
#)

#for dir in "${DIR[@]}"; do
#  if [ -d "$dir" ]; then
#    warning "Directory $dir already exists, skipping..."
#  else
#    mkdir -p "$dir"
#    info "Directory $dir created successfully!"
#  fi
#done

#printf "\n"
#success "A new ecosystem is in place!"

#printf "\n"

# ---------------------------------
# Aftermath
# ---------------------------------

#info "Remember to add ssh key to github (pbcopy < path_to_key)"
#printf "\n"
